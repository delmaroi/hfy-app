let express,dotenv,cors,connectDB,path,userRoutes,errorHandler,notFound;_fd7‍.w("express",[["default",["express"],function(v){express=v}]]);_fd7‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_fd7‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_fd7‍.w("./config/config",[["default",["connectDB"],function(v){connectDB=v}]]);_fd7‍.w("path",[["default",["path"],function(v){path=v}]]);_fd7‍.w("./routes/users",[["default",["userRoutes"],function(v){userRoutes=v}]]);_fd7‍.w("./middleware/errorMiddleware",[["errorHandler",["errorHandler"],function(v){errorHandler=v}],["notFound",["notFound"],function(v){notFound=v}]]);








dotenv.config();

connectDB();

const app = express(); // main thing

app.use(express.json()); // to accept json data
app.use(cors());
app.use("/v1", userRoutes);

// --------------------------deployment------------------------------
const __dirname = path.resolve();

// eslint-disable-next-line no-undef
if (process.env.NODE_ENV === "production") {
  app.use(express.static(path.join(__dirname, "/frontend/build")));

  app.get("*", (req, res) =>
    res.sendFile(path.resolve(__dirname, "frontend", "build", "index.html"))
  );
} else {
  app.get("/", (req, res) => {
    res.send("API is running..");
  });
}
// --------------------------deployment------------------------------

// Error Handling middlewares
app.use(notFound);
app.use(errorHandler);

// eslint-disable-next-line no-undef
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server is running on PORT: ${PORT}`);
});
